Перепишите класс Cache из предыдущего задания, используя sync.RWMutex.
Замените вашу функцию main() и добавьте константу из кода, который предложен далее:
const (
    kl = "keyl" 
    step = 7 
)
func main() { 
    cache := Cache{storage: make(map[string]int)} 
    for i := 0; i < 10; i++ { 
        go func() { 
            cache.Increase(kl, step) 
            time.Sleep(time.Millisecond * 100) 
        }()
    }
    for i := 0; i < 10; i++ { 
        i := i // сору variaЫe 
        go func() { 
            cache.Set(kl, step*i) 
            time.Sleep(time.Millisecond * 100) 
        }()
    }
    fmt.Println(cache.Get(kl)) 
}
Модифицируйте код, использующий класс Cache, из прошлого задания так, чтобы
все горутины завершали свое выполнение после отработки (используйте для этого sync.WaitGroup ).
Обратите внимание на строчку i := i // сору variaЫe. Без нее возможно возникновение ошибок, так как горутина будет использовать переменную i, которая на тот момент уже будет иметь значение, отличающееся от того, что было в момент создания горутины. Обычно для этого используют переменные с таким же названием (i := i), для того чтобы не плодить имена. Однако область видимости позволяет таким образом создавать новые переменные и взаимодеиствовать с ними, соответственно. 
Еще один способ избежать такой ошибки - использовать параметры функции, например: 
    for i := 0; i < 10; i++ { 
        go func(i int) { 
            cache.Set(kl, step*i) 
            time.Sleep(time.Millisecond * 100) 
        }(i) 
    }